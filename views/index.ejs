<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>

    <div id="toolbox">


      화면크기: <span class="display-scale">100%</span>
      <input type="range" min="0.5" max="2" step="0.1" value="1" id="scale-range">

      <button type="button" id="viewer-fullscreen">전체화면</button>


      화이트보드: <span class="display-whiteboard">off</span>
      <button type="button" id="wb-toggle">on/off</button>

      <select id="wb-type">
        <option value="0" selected>자유</option>
        <option value="1">직선</option>
        <option value="2">사각형</option>
        <option value="3">원형</option>
        <option value="4">화살표</option>
      </select>

      <select id="wb-width">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3" selected>3</option>
        <option value="4">4</option>
        <option value="5">5</option>
      </select>

      <select id="wb-color">
        <option value="#FF0000" selected>빨간색</option>
        <option value="#FFFF00">노란색</option>
        <option value="#010000">검은색</option>
        <option value="#FFFFFF">흰색</option>
      </select>

      레이저포인트: <span class="display-laserpointer">off</span> 
      <button type="button" id="lp-toggle">on/off</button>
      <select id="lp-type">
        <option value="0" selected="">화살표</option>
        <option value="1">원</option>
      </select>

      <button type="button" id="screenshot">스크린샷</button>

      <div id="moniter">
      </div>

    </div>

    <!--<video id="screen" src="" autoplay></video>-->
    
    <div class="viewer-wrap" tabindex="0">
      <div class="viewer" >
        <div class="scale-wrap">
        </div>
      </div>
    </div>

    <script src="javascripts/socket.io.js"></script>
    <script src="javascripts/jrtc.bundle.js"></script>
    <script src="javascripts/viewer.bundle.js"></script>
    <script>


    //var socketUrl = 'http://localhost:12341';
    var socketUrl = 'https://superlucky.co.kr:12341';
    var receiver = {};

    // 뷰어 테스트
    var viewerApp = new Viewer();

    receiver['screen-main'] = createReceiver(socketUrl, 'all', 'screen-main');

    var sender = null;

    receiver['screen-main'].connected = function() {
      console.log("makeVIEWER");

      viewerApp.init();

      viewerApp.addScreenOption('screen-main', receiver['screen-main'].screenOption);

      viewerApp.emitter.on('dataSend', function(buffer) {
        sender.sendChannel[Object.keys(sender.sendChannel)[0]].send(buffer);
      });

      receiver['screen-main'].connected = function() {
      }

    }

    receiver['screen-main'].onReceiveMessageCallback = function(event) {


      if (event.data.match(/^STREAM_IDS--/)) {
        let subscreens = event.data.replace(/^STREAM_IDS--/,'').split("||||");

        subscreens.forEach(function(id) {
          receiver['screen-sub-'+id] = createReceiver(socketUrl, 'screen', 'screen-sub-'+id);

          receiver['screen-sub-'+id].connected = function() {

            viewerApp.addScreenOption('screen-sub-'+id, receiver['screen-sub-'+id].screenOption);

            receiver['screen-sub-'+id].connected = function() {
            }

          }

          receiver['screen-sub-'+id].join('screen-sub-'+id);
        });


      }

      if (event.data == 'REQUEST_REVERSE_DATA_CHANNAL') {

        console.log("RECEIVE DATA-hahah",event.data, typeof event.data);

        sender = new Jrtc( 
          'sender', 
          'data', 
          io.connect(socketUrl)
        );
        sender.setEvent();

        var rmid = new Date().getTime();

        sender.join(rmid, function(){
          receiver['screen-main'].requestCreateRtc(rmid);
        });
      }

    }
    receiver['screen-main'].join('screen-main');



    function createReceiver(socketUrl, channleType, videoId) {

      let $scaleWrap = document.querySelector(".scale-wrap");
      let $moniter = document.getElementById('moniter');



      let videoElement = document.createElement("video");
      videoElement.id = videoId;
      videoElement.setAttribute("autoplay",true);

      let className = "screen";
      if (videoId == "screen-main") {
        className += " show";
      }

      videoElement.className= className;

      // ADD VIDEO EVENT
      viewerApp.addMouseEvent(videoElement);

      $scaleWrap.appendChild(videoElement);

      let buttonElement = document.createElement("button")
      buttonElement.id = "button-"+videoId;
      buttonElement.innerHTML = videoId;
      buttonElement.addEventListener('click', function() {

        let videoId = this.id.replace(/^button-/,"");
        let $video = document.getElementById(videoId);

        document.querySelector('.screen.show').classList.remove("show");
        $video.classList.add("show");
        viewerApp.setScale(viewerApp.scale);

      });

      $moniter.appendChild(buttonElement);

      let receiver =  new Jrtc(
        'receiver',
        channleType,
        io.connect(socketUrl),
        videoElement
      );
      return receiver;

    }



    </script>
  </body>
</html>
